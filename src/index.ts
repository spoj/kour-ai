import { app, BrowserWindow, ipcMain } from "electron";
import path from "path";
import fs from "fs";
import Store from "electron-store";
import { ISettings } from "./main";
import OpenAI from "openai";
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require("electron-squirrel-startup")) {
  app.quit();
}

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);
};

let defaultSystemPrompt = "";
try {
  defaultSystemPrompt = fs.readFileSync(
    path.join(__dirname, "DEFAULT_PROMPT.md"),
    "utf-8"
  );
} catch (error) {
  console.error("Failed to read default system prompt:", error);
}

const store = new Store<Record<string, ISettings>>({
  defaults: {
    settings: {
      apiKey: "",
      modelName: "google/gemini-2.5-pro",
      rootDir: "",
      systemPrompt: defaultSystemPrompt,
      sofficePath: "",
      providerOrder: "",
    },
  },
});

ipcMain.on("settings-get", (event, key: string) => {
  event.returnValue = store.get(`settings.${key}`);
});
ipcMain.on("settings-set", (_, key, val) => {
  store.set(`settings.${key}`, val);
});

ipcMain.on(
  "all-settings-get",
  (event, key: string) => (event.returnValue = store.get("settings"))
);

ipcMain.on("all-settings-set", (_, val) => {
  console.log("set", val);
  store.set("settings", val);
});

ipcMain.handle('chat:completion', async (_, { apiKey, modelName, messages }) => {
  try {
    const openai = new OpenAI({
      apiKey,
      baseURL: 'https://openrouter.ai/api/v1',
    });

    const completion = await openai.chat.completions.create({
      messages,
      model: modelName,
    });

    return { success: true, message: completion.choices[0].message.content };
  } catch (error) {
    console.error(error);
    return { success: false, message: "Sorry, I couldn't connect to the AI. Please check your API key and model name in the settings." };
  }
});

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on("ready", createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on("window-all-closed", () => {
  if (process.platform !== "darwin") {
    app.quit();
  }
});

app.on("activate", () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
